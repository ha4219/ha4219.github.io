{"componentChunkName":"component---src-pages-mdx-fields-slug-tsx-content-file-path-home-runner-work-ha-4219-github-io-ha-4219-github-io-contents-posts-2023-04-03-boj-27896-mdx","path":"/posts/2023-04-03/boj-27896/","result":{"data":{"mdx":{"id":"0a2a2cb6-0b6e-51f5-b122-42c8374ca0eb","body":"\n# 특별한 서빙\n\n[27896번: 특별한 서빙](https://www.acmicpc.net/problem/27896)\n\n## 문제 설명\n\n$N$명의 학생들이 순서대로 $x_i$만큼의 값을 뺄지 아니면 더할지를 정하는데 해당 불만도의 총 합이 $M$이 넘어서는 안된다. 이때 $M$이하로 만들기 위해 최소 몇 번 빼야하는가\n\n## 잡담\n\n문제 이해가 조금 힘들었다. 길이는 짧은 데 이해가 안됐다.\n\n## 풀이\n\n이유는 모르겠지만 처음부터 그냥 그리디라고 생각했다. 그래서 생각을 구체화 시켰다. \n\n- $N$명의 불만도를 순차적으로 더하고 pq에 insert한다. ($O(N)$)\n    - 이때 $M$보다 불만도 값이 크다면 pq에서 가장 큰 값을 뽑아 2*$x_{pq}$ 값을 불만도에서 뺀다. $O(\\log N)$\n        - 여러번 pq에서 값을 빼야하는 상황이 있을까? → 없다.\n            - $sum_{i}=sum_{i-1}+x_i$\n            - if $sum_{i-1}+x_i >= M$\n                - $sum_{i}=sum_{i} - 2 \\times max(x_{0...i})$\n                - $x_i \\leq max(x_{0...i})$\n                - so $sum_{i}<M$\n\n그래서 $O(N\\log N)$이다.\n\n## 다른 방식\n\n다른 사람들한테 풀어보라고 했더니 2가지 방법을 얘기했다.\n\n1. combination<br/>\n    조합은 왜 안될까? 코드를 보지 못해서 정확한 접근은 못봤지만 조합이라는 키워드를 봤을 때 풀이는 최소 개수를 이항 계수로 두고 문제를 푸는 방법이다. 이는 완전탐색인데 $O(N\\times N!)$으로 보인다. 그러므로 불가능.\n2. Knapsack<br/>\n    일반적으로 d[학생의 index][불만도의 합]으로 두고 계산한다. 하지만 $N, M$ 값이 크기 때문에 성립할 수 없지만 작다고 생각하고 접근해보자.<br/>\n    ```cpp\n    // 사실 코드는 대충써서 틀린 거 같다. ㅋㅋ\n    int d[학생_index][불만도의 합] = 파묻튀 먹은 인원 수\n    for(int i=0;i<N;i++){\n    \tfor(int k=0;k<M;k++){\n    \t\tif (a[i] + k < M) { // 넣을 수 있을 때\n    \t\t\td[i][a[i] + k] = max(d[i-1][k], d[i][a[i] + k] + 1)\n    \t\t} else { // 넣을 수 없을 때\n    \t\t\t// 여기가 핵심인데 해당 부분은 현재 index가 i인 학생을 제외 시킨다.\n    \t\t\td[i][k] = d[i-1][k];\n    \t\t}\n    \t}\n    }\n    ```\n    해당 부분은 현재 index가 i인 학생을 제외 시킨다.<br/>\n    과연 이게 맞을까? 반례를 들겠다.<br/>\n    ```cpp\n    3 3\n    2 1 1\n    ans: 1\n    ```\n    위 코드는 냅색으로 접근한다면 처음에 2를 가져오고 1, 1 값을 버려서 최종 값으로 2를 출력할 것이다. (틀렸으면 말해 줘라.)<br/>\n    그러면 이부분을 pq를 이용해 최대로 큰 녀석을 빼서 계산한다면?<br/>\n    이전 for문이 필요 없게 된다. $O(NM\\log N)$을 통과시켜주는 문제는 없을 것이다.<br/>\n\n## 생각 정리\n\n글로 쓰다보니 조금 엉성하다. 좀 더 생각을 다듬고 글을 수정하겠다.","excerpt":"27896번: 특별한 서빙 문제 설명\n\nNNN명의 학생들이 순서대로 xix_ixi​만큼의 값을 뺄지 아니면 더할지를 정하는데 해당 불만도의 총 합이 MMM이 넘어서는 안된다. 이때 MMM이하로 만들기 위해 최소 몇 번 빼야하는가\n\n잡담\n\n문제 이해가 조금 힘들었다. 길이는 짧은 데 이해가 안됐다.\n\n풀이\n\n이유는 모르겠지만 처음부터 그냥 그리디라고 생각했다. 그래서 생각을 구체화 시켰다.\n\nNNN명의 불만도를 순차적으로 더하고 pq에 insert한다. (O(N)O(N)O(N))\n이때 MMM보다 불만도 값이 크다면 pq에서 가장 큰 값을 뽑아 2*xpqx_{pq}xpq​ 값을 불만도에서 뺀다. O(log⁡N)O(\\log N)O(logN)\n여러번 pq에서 값을 빼야하는 상황이 있을까? → 없다.\nsumi=sumi−1+xisum_{i}=sum_{i-1}+x_isumi​=sumi−1​+xi​if sumi−1+xi>=Msum_{i-1}+x_i >= Msumi−1​+xi​>=M\nsumi=su…","frontmatter":{"date":"April 03, 2023","title":"특별한 서빙","category":"algorithm","author":"ha4219","tags":["algorithm"],"thumbnail":null},"fields":{"slug":"/posts/2023-04-03/boj-27896/","timeToRead":{"minutes":3.565}}},"site":{"siteMetadata":{"siteUrl":"https://jeongdongha.me"}}},"pageContext":{"id":"0a2a2cb6-0b6e-51f5-b122-42c8374ca0eb","fields__slug":"/posts/2023-04-03/boj-27896/","__params":{"fields__slug":"posts"},"frontmatter":{"layout":"post","title":"특별한 서빙","tags":["algorithm"],"category":"algorithm","date":"2023-04-03T00:00:00.000Z","author":"ha4219"}}},"staticQueryHashes":[],"slicesMap":{}}