{"version":3,"file":"component---src-pages-posts-mdx-fields-slug-tsx-content-file-path-users-jeongdongha-code-toy-ha-4219-github-io-contents-posts-test-algorithm-mdx-e5053c1e11296aa17cc6.js","mappings":"gOAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,GAAI,OACHC,EAAAA,EAAAA,MAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,GAAI,KAAM,qBAAsB,KAAMI,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,4EACnK,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,MAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,UCTO,MAAMW,EAAeC,IAC1B,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,OAAOJ,EAAAA,cAAoBO,EAAAA,EAAQ,KAAMP,EAAAA,cAAoBQ,EAAAA,GAAa,KAAMF,GAAU,EAI7E,SAASG,EAAiBjB,GACvC,OAAOQ,EAAAA,cAAoBG,EAAcX,EAAOQ,EAAAA,cAAoBU,EAAqBlB,GAC3F,C,8FCoBO,MAAMmB,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBb,GAC/B,MAAMc,EAAoB,aAAiBF,GAE3C,OAAO,WAAc,IAEO,mBAAfZ,EACFA,EAAWc,GAGb,IAAIA,KAAsBd,IAChC,CAACc,EAAmBd,GACzB,CAGA,MAAMe,EAAc,CAAC,EAQd,SAASN,GAAY,WAACT,EAAU,SAAEO,EAAQ,qBAAES,IACjD,IAAIC,EAAgBJ,EAAiBb,GAMrC,OAJIgB,IACFC,EAAgBjB,GAAce,GAGzB,gBACLH,EAAWM,SACX,CAACC,MAAOF,GACRV,EAEJ,C","sources":["webpack://ha4219.github.io/./contents/posts/testAlgorithm.mdx","webpack://ha4219.github.io/./src/pages/posts/{mdx.fields__slug}.tsx","webpack://ha4219.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"algorithm 어렵다~~~~\"), \"\\n\", React.createElement(_components.h2, null, \"한글 작성 테스트한글 작성 테스트한글 작성 테스트한글 작성 테스트한글 작성 테스트한글 작성 테스트한글 작성 테스트한글 작성 테스트\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/jeongdongha/code/toy/ha4219.github.io/contents/posts/testAlgorithm.mdx\";\nimport Layout from \"@/components/Layout\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport React from \"react\";\nexport const PostTemplate = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(Layout, null, React.createElement(MDXProvider, null, children));\n};\nconst pageQuery = \"1105042402\";\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode} [children]\n *   Children.\n *\n * @callback MergeComponents\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components|MergeComponents} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  let allComponents = useMDXComponents(components)\n\n  if (disableParentContext) {\n    allComponents = components || emptyObject\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","h2","_provideComponents","components","React","wrapper","MDXLayout","PostTemplate","_ref","data","children","Layout","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","MDXContext","useMDXComponents","contextComponents","emptyObject","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}